/**
 * Created by Anand on 9/28/2015.
 */

class ArraySor {
    private long[] arr;
    int nElems;

    public ArraySor(int max) {
        arr = new long[max];
        nElems =0;
    }

    public void insert(long value) {
        arr[nElems] = value;
        nElems++;
    }

    public void swap(int a, int b) {
        long temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    public void display() {
        for (int i = 0; i < nElems; i++) {
            System.out.println(arr[i]+" ");
        }
        System.out.println(" ");
    }

    public void selectionSort() {
        int out, min, in;
        for (out = 0; out < nElems-1; out++) {
            min=out;
            for (in = out+1; in < nElems; in++) {
                if (arr[min] > arr[in]) {
                    min=in;
                }
            }
            swap(out, min);
        }
    }

    public void insertionSort() {
        int out, in;
        for (out = 1; out < nElems; out++) {
            long temp = arr[out];
            in = out;
            while (in > 0 && arr[in-1]>=temp) {
                arr[in] = arr[in-1];
                --in;
            }
            arr[in] = temp;
        }
    }

    public void quickSort() {
/*Yet to be implemented*/
    }

    public void mergeSort() {
/*Yet to be implemented*/
    }
}

public class Sorting {
    public static void main(String[] args) {
        ArraySor arr = new ArraySor(10);

        arr.insert(777);
        arr.insert(2252);
        arr.insert(333);
        arr.insert(4444);
        arr.insert(55);
        arr.insert(66);
        arr.insert(111);

        System.out.println("Before sorting: ");
        arr.display();

        arr.insertionSort();
        System.out.println("After sorting: ");
        arr.display();
    }
}
